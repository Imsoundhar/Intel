CREATE OR REPLACE PROCEDURE ORDER_DATABASE_E1.ORDER_BASE.P_INVOICE_GENERATE()
RETURNS VARIANT
LANGUAGE SQL
AS

BEGIN

    UPDATE T_SALES_ORDER_DETAIL
    SET TOTAL_AMOUNT =   0;

    UPDATE T_SALES_ORDER_HEADER
    SET ITEM_COUNT = 0,
        TOTAL_AMOUNT = 0;

    UPDATE T_SALES_ORDER_DETAIL
    SET TOTAL_AMOUNT = QTY * PRICE;

    UPDATE T_SALES_ORDER_HEADER
    SET ITEM_COUNT = (
            SELECT SUM(QTY)
            FROM ORDER_DATABASE_E1.ORDER_XFRM.V_SALES_ORDER_DETAIL AS SOD
            WHERE T_SALES_ORDER_HEADER.ORDER_ID = SOD.ORDER_ID
        ),
        TOTAL_AMOUNT = (
            SELECT SUM(QTY * PRICE)
            FROM ORDER_DATABASE_E1.ORDER_XFRM.V_SALES_ORDER_DETAIL AS SOD
            WHERE T_SALES_ORDER_HEADER.ORDER_ID = SOD.ORDER_ID
        );

    UPDATE T_CUSTOMER
    SET TOTAL_ORDERS = (
            SELECT COUNT(*)
            FROM ORDER_DATABASE_E1.ORDER_XFRM.V_SALES_ORDER_DETAIL  
            WHERE ORDER_DATABASE_E1.ORDER_XFRM.V_SALES_ORDER_DETAIL.CUSTOMER_ID = T_CUSTOMER.CUSTOMER_ID
        );

    UPDATE T_SALES_ORDER_HEADER
    SET DISCOUNT =
        CASE 
            WHEN C.CATEGORY = 'Gold' THEN SOH.TOTAL_AMOUNT * 0.05
            WHEN C.CATEGORY = 'Silver' THEN SOH.TOTAL_AMOUNT * 0.03
            WHEN C.CATEGORY = 'Bronze' THEN SOH.TOTAL_AMOUNT * 0.01
            WHEN C.CATEGORY = 'Regular' AND SOH.COUPON_CODE = 'Copon_X' THEN SOH.TOTAL_AMOUNT*0.03
            WHEN C.CATEGORY = 'Regular' AND SOH.COUPON_CODE = 'Copon_Y' THEN SOH.TOTAL_AMOUNT*0.02
            WHEN C.CATEGORY = 'Regular' AND SOH.COUPON_CODE = 'Copon_Z' THEN SOH.TOTAL_AMOUNT*0.01
            ELSE 0
        END
    FROM T_SALES_ORDER_HEADER SOH
    JOIN T_CUSTOMER C
    WHERE T_SALES_ORDER_HEADER.CUSTOMER_ID = C.CUSTOMER_ID;

    TRUNCATE T_INVOICE;
    
    INSERT INTO ORDER_DATABASE_E1.ORDER_BASE.T_INVOICE(ORDER_ID, ORDER_DATE, INVOICE_DATE, TAX_AMOUNT, TOTAL_AMOUNT, DISCOUNT, FINAL_INVOICE_AMT, CUSTOMER_ID, CREATE_DATE, CREATE_USER)
    SELECT
        SOH.ORDER_ID,
        SOH.ORDER_DATE,
        CURRENT_DATE AS INVOICE_DATE,
        (SOH.TOTAL_AMOUNT * 0.09) AS TAX_AMOUNT,
        SOH.TOTAL_AMOUNT,
        SOH.DISCOUNT,
        (SOH.TOTAL_AMOUNT - SOH.DISCOUNT + TAX_AMOUNT) AS FINAL_INVOICE_AMOUNT,
        SOH.CUSTOMER_ID,
        SOH.CREATE_DATE,
        SOH.CREATE_USER
    FROM ORDER_DATABASE_E1.ORDER_XFRM.V_SALES_ORDER_HDR SOH
    JOIN T_CUSTOMER C
    ON SOH.CUSTOMER_ID = C.CUSTOMER_ID
    WHERE SOH.ORDER_DATE > CURRENT_DATE AND C.STATUS = 'Active';

    UPDATE T_CUSTOMER 
    SET TOTAL_INVOICE_AMOUNT = 
        (SELECT SUM(I.FINAL_INVOICE_AMT) 
        FROM ORDER_DATABASE_E1.ORDER_ANALYSIS.V_INVOICE I
        WHERE  I.CUSTOMER_ID = T_CUSTOMER.CUSTOMER_ID),
    
    LOYALTY_POINTS = (
        CASE
            WHEN CATEGORY = 'Gold' AND TOTAL_INVOICE_AMOUNT >= 1000 THEN 100 
            WHEN CATEGORY = 'Silver' AND TOTAL_INVOICE_AMOUNT >= 1000 THEN 50 
            WHEN CATEGORY = 'Bronze' AND TOTAL_INVOICE_AMOUNT >= 1000 THEN 30 
            ELSE 0
            END
    );

    SELECT * FROM T_CUSTOMER;
    
    RETURN PARSE_JSON('{"Result": "SUCCESS"}');
END;


